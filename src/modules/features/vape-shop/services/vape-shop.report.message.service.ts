import { Injectable } from '@nestjs/common';

interface ISalesReportByAddress {
    address: string;
    salesCountByProductNameMap: Map<string, number>;
}

@Injectable()
export class VapeShopReportMessageService {
    constructor(
    ) { }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥–∞–∂ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram
     * @param reports - –º–∞—Å—Å–∏–≤ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ç–æ—á–∫–∞–º –ø—Ä–æ–¥–∞–∂
     * @param period - –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
     * @returns –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π
     */
    createSalesTableMessage(reports: ISalesReportByAddress[], period: string): string {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        const allProducts = new Set<string>();
        for (const report of reports) {
            for (const productName of report.salesCountByProductNameMap.keys()) {
                allProducts.add(productName);
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let message = `üìä **–û–¢–ß–ï–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú**\n`;
        message += `üìÖ ${period}\n\n`;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–¥—Ä–µ—Å–∞–º–∏
        message += `**–¢–û–í–ê–†–´ –ü–û –ê–î–†–ï–°–ê–ú:**\n\n`;

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Å–µ–º –∞–¥—Ä–µ—Å–∞–º
        for (const productName of Array.from(allProducts).sort()) {
            const salesByAddress = reports.map(report => ({
                address: report.address,
                sales: report.salesCountByProductNameMap.get(productName) || 0
            }));

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏
            const salesWithData = salesByAddress.filter(item => item.sales > 0);

            if (salesWithData.length > 0) {
                message += `**${productName}:**\n`;
                for (const item of salesWithData) {
                    message += `  ‚Ä¢ ${item.address}: **${item.sales}** —à—Ç.\n`;
                }
                message += `\n`;
            }
        }

        return message;
    }


    createReportMessage(
        address: string,
        salesCountByProductNameMap: Map<string, number>,
        date: string,
    ): string {
        let message = `**${address}**\n`;
        message += `üìÖ ${date}\n\n`;

        if (salesCountByProductNameMap.size > 0) {
            for (const product of salesCountByProductNameMap.entries()) {
                message += `‚Ä¢ ${product[0]}: **${product[1]}** —à—Ç.\n`;
            }
        } else {
            message += `‚ùå –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–∞–∂ –Ω–µ –±—ã–ª–æ\n`;
        }

        return message;
    }
}
