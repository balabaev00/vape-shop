import { Injectable, Logger } from '@nestjs/common';
import { VapeShopReportMessageService } from '@src/modules/features/vape-shop/services/vape-shop.report.message.service';
import { VapeShopSynchronizeService } from '@src/modules/features/vape-shop/services/vape-shop.synchronize.service';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';

@Injectable()
export class TelegramService {
    private readonly logger = new Logger(TelegramService.name);

    constructor(
        @InjectBot() private readonly bot: Telegraf<Context>,
        private readonly vapeShopSynchronizeService: VapeShopSynchronizeService,
        private readonly vapeShopReportMessageService: VapeShopReportMessageService,
    ) {
        this.setupCommands();
        this.bot.telegram.setMyCommands([
            { command: 'sales_period_report', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–¥–∞–∂' },
            { command: 'today_report', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á–µ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ —Å–µ–≥–æ–¥–Ω—è' },
        ])
    }

    private setupCommands() {
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂
        this.bot.command('sales_period_report', async (ctx) => {
            await this.handleSalesPeriodReport(ctx);
        });

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        this.bot.command('today_report', async (ctx) => {
            await this.handleTodayReport(ctx);
        });

        // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
        this.bot.command('help', async (ctx) => {
            await ctx.reply(`
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/sales_period_report - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂
/today_report - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            `);
        });
    }

    private async handleSalesPeriodReport(ctx: Context) {
        try {
            await ctx.reply('üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥');

            await this.vapeShopSynchronizeService.getSalesPeriodTurnoverReport();

            await ctx.reply('‚úÖ –û—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ Google Sheets –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        } catch (error) {
            this.logger.error('Error in sales period report:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂');
        }
    }

    private async handleTodayReport(ctx: Context) {
        try {
            await ctx.reply('üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥');

            const { reports, day } = await this.vapeShopSynchronizeService.getToDayTurnoverReport();
            const message = this.vapeShopReportMessageService.createSalesTableMessage(reports, day);

            await ctx.reply(message, { parse_mode: 'Markdown' });
        } catch (error) {
            this.logger.error('Error in today report:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
        }
    }
}
