import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Cron } from '@nestjs/schedule';
import { VapeShopReportMessageService } from '@src/modules/features/vape-shop/services/vape-shop.report.message.service';
import { VapeShopSynchronizeService } from '@src/modules/features/vape-shop/services/vape-shop.synchronize.service';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';

@Injectable()
export class TelegramSchedulerService {
    private readonly logger = new Logger(TelegramSchedulerService.name);
    private readonly TELEGRAM_VAPE_SHOP_REPORT_CHAT: number;

    constructor(
        @InjectBot() private readonly bot: Telegraf,
        private readonly vapeShopSynchronizeService: VapeShopSynchronizeService,
        private readonly vapeShopReportMessageService: VapeShopReportMessageService,
        private readonly configService: ConfigService,
    ) {
        this.TELEGRAM_VAPE_SHOP_REPORT_CHAT = this.configService.getOrThrow('TELEGRAM_VAPE_SHOP_REPORT_CHAT');
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:15 –ø–æ UTC+9
     * Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: 15 13 * * * (13:15 UTC = 22:15 UTC+9)
     */
    @Cron('15 13 * * *', {
        name: 'daily-reports',
        timeZone: 'UTC',
    })
    async handleDailyReports() {
        this.logger.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ 22:15 UTC+9');

        await this.bot.telegram.sendMessage(this.TELEGRAM_VAPE_SHOP_REPORT_CHAT, 'üöÄ –ó–∞–ø—É—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã');

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂
            await this.handleSalesPeriodReport();

            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç—á–µ—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 2000));

            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            await this.handleTodayReport();

            await this.bot.telegram.sendMessage(this.TELEGRAM_VAPE_SHOP_REPORT_CHAT, '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');

            this.logger.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
        }
    }

    private async handleSalesPeriodReport() {
        try {
            this.logger.log('üìä –ó–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂...');

            await this.vapeShopSynchronizeService.getSalesPeriodTurnoverReport();

            this.logger.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥—É –ø—Ä–æ–¥–∞–∂:', error);
            throw error;
        }
    }

    private async handleTodayReport() {
        try {
            this.logger.log('üìà –ó–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...');

            const { reports, day } = await this.vapeShopSynchronizeService.getToDayTurnoverReport();
            const message = this.vapeShopReportMessageService.createSalesTableMessage(reports, day);

            await this.bot.telegram.sendMessage(this.TELEGRAM_VAPE_SHOP_REPORT_CHAT, message);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç)
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —á–∞—Ç
            this.logger.log('üì± –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω');
            this.logger.debug('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞:', message);

        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
            throw error;
        }
    }
}
